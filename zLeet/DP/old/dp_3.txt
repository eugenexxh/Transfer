55. 跳跃游戏                     

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        vector<bool> dp(n, false);
        dp[0]=true;
        
        for(int i=1; i<n; ++i)
        {
            for(int j=0; j<i; ++j)
            {
                if(dp[j] && j+nums[j]>=i)
                {
                    dp[i]=true;
                    break;
                }
            }
        }
        
        return dp[n-1];        
    }
};

//存在型
//dp[i]: 走到i位置是否可行
//leet_AC: 73/75, lint全AC

******************************************************************************************************************

45. 跳跃游戏 II

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n, INT_MAX);
        dp[0]=0;
        
        for(int i=1; i<n; ++i)
        {
            for(int j=0; j<i; ++j)
            {
                if(j+nums[j]>=i && dp[j]!=INT_MAX)
                {
                    dp[i]=min(dp[i], dp[j]+1);
                }
            }
        }
        
        return dp[n-1];        
    }
};

//极值型
//dp[i]: 走到i位置所需要的最少步数
//leet_AC: 90/92

****************************************************************************************************************