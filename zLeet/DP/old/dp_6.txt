背包问题  lint_92

int backPack(int m, vector<int> &A)
{
	vector<int> dp(m + 1, 0);
	dp[0] = 0;

	for (int j = 0; j < A.size(); ++j)
	{
		for (int i = m; i>0; --i)
		{
			if (i >= A[j])
			{
				dp[i] = max(dp[i], dp[i - A[j]] + A[j]);
			}
		}
	}

	return dp[m];
}

********************************************************************************************************************************

背包问题II  lint_125

int backPack(int m, vector<int> &A)
{
	vector<int> dp(m + 1, 0);
	dp[0] = 0;

	for (int j = 0; j < A.size(); ++j)
	{
		for (int i = m; i>0; --i)
		{
			if (i >= A[j])
			{
				dp[i] = max(dp[i], dp[i - A[j]] + V[j]);
			}
		}
	}

	return dp[m];
}

***************************************************************************************************************************

换硬币  lint_669/leet_322 (不是0-1背包）

int coinChange(vector<int>& coins, int amount)
{
	vector<int> dp(amount+1, INT_MAX);
	dp[0]=0;
	
	for(int i=1; i<=amount; ++i)
	{
		for(int j=0; j<coins.size(); ++j)
		{
			if(i>=coins[j] && dp[i-coins[j]]!=INT_MAX)
			{
			   dp[i]=min(dp[i], dp[i-coins[j]]+1); 
			}
		}
	}
	
	return (dp[amount]==INT_MAX) ? -1 : dp[amount];        
}

***************************************************************************************************************************





