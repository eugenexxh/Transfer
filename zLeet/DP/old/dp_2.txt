62. 不同路径

class Solution {
public:
    int uniquePaths(int m, int n) 
	{
        vector<vector<int>> dp(m+1, vector<int>(n+1,0));
        dp[0][1]=1;
        
        for(int i=1; i<=m; ++i)
        {
            for(int j=1; j<=n; ++j)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        
        return dp[m][n];        
    }
};

//计数型
//dp[i][j]: 走到(i, i)位置所拥有的方法

*************************************************************************************************************

63. 不同路径II            //与62相比，一些位置多了障碍

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty() || obstacleGrid[0].empty() || obstacleGrid[0][0]==1) return 0;
        int m=obstacleGrid.size(), n=obstacleGrid[0].size();
        
        vector<vector<long>> dp(m+1, vector<long>(n+1, 0));
        dp[0][1]=1;
        
        for(int i=1; i<=m; ++i)
        {
            for(int j=1; j<=n; ++j)
            {
                if(obstacleGrid[i-1][j-1] ==1) continue;
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        
        return dp[m][n];        
    }
};

//计数型
//dp[i][j]: 走到(i, i)位置所拥有的走法

**************************************************************************************************************

70. 爬楼梯

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, 0);
        dp[0]=1;
        dp[1]=1;
        
        for(int i=2; i<=n; ++i)
        {
            dp[i] = dp[i-1]+dp[i-2];
        }
        
        return dp[n];        
    }
};

//计数型
//dp[i]: 走到第i个台阶时所拥有的不同走法

*************************************************************************************************************

91. 解码方法

class Solution {
public:
    int numDecodings(string s) {
        if (s.empty() || s[0] == '0') return 0;
		
        vector<int> dp(s.size() + 1, 0);
        dp[0] = 1;
		
        for (int i = 1; i < dp.size(); ++i)
		{
            dp[i] = (s[i - 1] == '0') ? 0 : dp[i - 1];
            if (i > 1 && (s[i - 2] == '1' || (s[i - 2] == '2' && s[i - 1] <= '6'))) 
			{
                dp[i] += dp[i - 2];
            }
        }
		
        return dp.back();
    }
};

*************************************************************************************************************


377. 组合总和 Ⅳ

class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        vector<unsigned int> dp(target+1);
        dp[0]=1;
        
        for(int i=1; i<=target; ++i)
        {
            for(int j=0; j<nums.size(); ++j)
            {
                if(i>=nums[j])
                {
                    dp[i] += dp[i-nums[j]];
                }
            }
        }
        
        return dp[target];        
    }
};