62. 不同路径

class Solution {
public:
    int uniquePaths(int m, int n) 
	{
        vector<vector<int>> dp(m+1, vector<int>(n+1,0));
        dp[0][1]=1;
        
        for(int i=1; i<=m; ++i)
        {
            for(int j=1; j<=n; ++j)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        
        return dp[m][n];        
    }
};

//计数型
//dp[i][j]: 走到(i, i)位置所拥有的方法

*************************************************************************************************************

63. 不同路径II            //与62相比，一些位置多了障碍

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty() || obstacleGrid[0].empty() || obstacleGrid[0][0]==1) return 0;
        int m=obstacleGrid.size(), n=obstacleGrid[0].size();        
        vector<vector<long>> dp(m+1, vector<long>(n+1, 0));
        dp[0][1]=1;
        
        for(int i=1; i<=m; ++i)
        {
            for(int j=1; j<=n; ++j)
            {
                if(obstacleGrid[i-1][j-1] ==1) continue;             //如果在原obstacleGrid的最上方和最左侧插入0，就可以和dp对应
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        
        return dp[m][n];        
    }
};

//计数型
//dp[i][j]: 走到(i, i)位置所拥有的走法

**************************************************************************************************************

64. 最小路径和

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();        
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0]=grid[0][0];
        for(int i=1; i<m; ++i) dp[i][0] = grid[i][0] + dp[i-1][0];
        for(int j=1; j<n; ++j) dp[0][j] = grid[0][j] + dp[0][j-1];
        
        for(int i=1; i<m; ++i)
        {
            for(int j=1; j<n; ++j)
            {
                dp[i][j]=grid[i][j]+min(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp.back().back();        
    }
};

//极值型
//dp[i][j]: 到达(i, j)位置的最短路径和

********************************************************************************************************************

174. 地下城游戏

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(), n=dungeon[0].size();        
        vector<vector<int>> dp(m+1, vector<int>(n+1, INT_MAX));
        dp[m][n - 1] = 1; dp[m - 1][n] = 1;
        
        for (int i = m - 1; i >= 0; --i) 
        {
            for (int j = n - 1; j >= 0; --j) 
            {
                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j]);
            }
        }
        
        return dp[0][0];        
    }
};

//极值型
//dp[i][j]: 到达(i, j)位置所需要的最低健康点数
