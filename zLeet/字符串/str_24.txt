8. String to Integer (atoi)     

class Solution {
public:
    int myAtoi(string str) 
	{
        int i=0, base=0, sign=1;
        
        while(i<str.size() && str[i]==' ') ++i;
        
        if(str[i]=='+' || str[i]=='-')
        {
            sign = (str[i]=='+') ? 1 : -1;
            ++i;                                    //很重要
        }
        
        while(i<str.size() && str[i]>='0' && str[i]<='9')
        {
            if(base > INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - '0' > 7)) return sign==1 ? INT_MAX : INT_MIN;
            
            base = 10*base + (str[i]-'0');
            ++i;
        }
        
        base *= sign;
        return base;
    }
};


*****************************************************************************************************************************

150. Evaluate Reverse Polish Notation     //逆波兰表达式即后缀表达式，没有括号

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st;
		
        for(int i=0; i<tokens.size(); ++i)
        {
            if(tokens[i]!="+" && tokens[i]!="-" && tokens[i]!="*" && tokens[i]!="/")     //1. 遇到数字，入栈
            {
                int tmp=stoi(tokens[i]);     //因为数字可能不是个位数，所以不能用if(s[i]>="0" && s[i]<="9")
                st.push(tmp);
            }
            else      //2. 其他（遇到运算符号），出栈两个数进行运算后将结果入栈
            {
                int num1=st.top(); st.pop();
                int num2=st.top(); st.pop();
                if(tokens[i]=="+") st.push(num2+num1);
                if(tokens[i]=="-") st.push(num2-num1);
                if(tokens[i]=="*") st.push(num2*num1);
                if(tokens[i]=="/") st.push(num2/num1);
            }
        }
        
        return st.top();        
    }
};

/*
int number = stoi(string);     //将字符串型数字->整型数字
string str = to_string(number);     //将整型数字->字符串型数字
*/



*****************************************************************************************************************************

224. Basic Calculator     //普通的运算表达式，有+，-，有括号，但没有*,/

class Solution {
public:
    int calculate(string s) {
        stack<int> st;
        int i=0, n=s.size();
        int sign=1, res=0;
		
        while(i<n)
        {
            if(s[i]>='0' && s[i]<='9')                    //1. 处理数字（字符串转化为整型数字，leet_8)
            {
                int base=0;
                while(i<n && s[i]>='0' && s[i]<='9')            //数字可能是多个位数，用while一次性取出
                {
                    base = 10*base + (s[i]-'0');
                    ++i;
                }
                res += sign*base;
                --i;                                            //重要，因为最后i会统一++
            }
            else if(s[i]=='+' || s[i]=='-')           //2. 处理符号
			{
			    sign = (s[i]=='+' ? 1 : -1);
			}	
            else if(s[i]=='(')                       //4. 遇到左括号，入栈（先数字，后符号）
            {
                st.push(res);
                st.push(sign);
                res=0;
                sign=1;
            }
            else if(s[i]==')')     //5. 遇到右括号，出栈运算（先符号，后数字）
            {
                res *= st.top(); st.pop();
                res += st.top(); st.pop();
            }
            
            ++i;
        }
        
        return res;        
    }
};

*********************************************************************************************************************************

227. Basic Calculator II    //有+，-，*，/，但没有括号

class Solution {
public:
    int calculate(string s) {
        stack<int> st;
        int i=0, num=0, n=s.size();
        char op='+';        
       
        while(i< n)
        {
            if(s[i]>='0' && s[i]<='9')       //1. 遇到字符型数字，将其化为整型数字     
            {
                int base=0;
                while(i<n && s[i]>='0' && s[i]<='9')      //数字可能有多个位数   
                {
                    base = 10*base + (s[i]-'0');
                    ++i;
                }
                num = base;
                --i;               //重要
            }
			
            if(s[i]=='+' || s[i]=='-' || s[i]=='*' || s[i]=='/' || i==n-1)     //2.其他情况分情况讨论     
            {                                                                      
                if(op=='+') st.push(num);      //2.1. 记录的运算符为+，则正入栈        
                else if(op=='-') st.push(-num);     //2.2. 记录的运算符为-，则负入栈
                else if(op=='*' || op=='/')         //2.3. 记录的运算符为*或/，则出栈进行运算后将结果入栈
                {
                    int tmp=st.top(); st.pop();
                    int tmp2=(op=='*') ? tmp*num : tmp/num;
                    st.push(tmp2);
                }
                
                op=s[i];      
                num=0;
            }
            
            ++i;
        }
        
        int res = 0;
        while(!st.empty())
        {
            res += st.top();
            st.pop();
        }        
        return res;       
    }
};


/*
之所以不能用else if是因为第二个if()里面有i==n-1，包含了第一个if的情况，即既是最后一位，也是数字
*/