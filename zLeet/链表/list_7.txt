141. Linked List Cycle                         //判断链表是否有环
                                                 //如果链表有环，快慢指针一定会相遇
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow=head, *fast=head;
		
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast) return true;
        }
        
        return false;        
    }
};

*************************************************************************************************************************

142. Linked List Cycle II                  //找到环的入口节点，两次相遇

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow=head, *fast=head;          //1. 快慢指针第一次相遇
		
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast) break;
        }
        if(!fast || !fast->next) return NULL;
        
        slow=head;              //2. 然后慢指针回到起点，快指针在原位，以同样的速度，若再次相遇，那个点就是入口节点
        while(slow!=fast)
        {
            slow=slow->next;
            fast=fast->next;
        }
        return fast;
    }
};

*****************************************************************************************************************************

160. Intersection of Two Linked Lists           //寻找两个单链表相交的起始节点

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        ListNode* p1 = headA, *p2 = headB;
		
        while(p1 != p2)                        //利用相遇
        {
            p1 = p1 ? p1->next : headB;
            p2 = p2 ? p2->next : headA;
        }
        
        return p1;       
    }
};