225. Implement Stack using Queues                  //无需辅助

class MyStack {
public:
    /** Initialize your data structure here. */	
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {                            //让当前进入的元素“沉到最底下”，好实现后进先出
        q.push(x);
        for(int i=0; i<q.size()-1; ++i)
        {
            q.push(q.front());
            q.pop();
        }        
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int x=q.front();
        q.pop();
        return x;        
    }
    
    /** Get the top element. */
    int top() {
        return q.front();        
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();        
    }
private:
    queue<int> q;
};


/*
stack和queue使用函数上的区别，
stack用top()，
queue用front().
*/

************************************************************************************************************************

232. Implement Queue using Stacks                   //使用到辅助栈_old，将_new中的元素倒序放入到_old中

class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s1.push(x);        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {                                  //将s1中的元素倒序放入到s2中，将底部的元素浮出来，体现出先进先出
        shift();
        int x=s2.top(); s2.pop();
        return x;        
    }
    
    /** Get the front element. */
    int peek() {                                //将s1中的元素倒序放入到s2中，将底部的元素浮出来，体现出先进先出
        shift();
        return s2.top();        
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty()&&s2.empty();        
    }
    
    void shift()                               //将栈new中的元素倒序放入栈old中
    {
        if(!s2.empty()) return;
        while(!s1.empty())
        {
            s2.push(s1.top());
			s1.pop();
        }
    }
    
private:
    stack<int> s1, s2;
};

