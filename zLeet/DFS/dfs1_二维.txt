37. 解数独                              //37，79都是判断某种方法/路径是否可行，不行的话需要重置（回溯） DFS+Back

class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) 
	{
        helper(board, 0, 0);
    }
    
    bool helper(vector<vector<char>>& board, int i, int j)           //从(i,j)位置开始向右填写board
	{
        if (i == 9) return true;
        if (j >= 9) return helper(board, i + 1, 0);
        if (board[i][j] != '.') return helper(board, i, j + 1);      //当前位置已有数字，不需要填
		
        for (char c = '1'; c <= '9'; ++c) 
		{
            if (!isValid(board, i , j, c)) continue;       
			
            board[i][j] = c;                                  //假设当前位置填字符c			
            if (helper(board, i, j + 1)) return true;            //向右递归到底，看看填c到底对不对。对的话返回true，后面执行不到了          		
            board[i][j] = '.';                                       //不对的话，当前位置需要重置	                                 
        }
		
        return false;
    }
    
    bool isValid(vector<vector<char>>& board, int x, int y, char c)     //判断一个位置(x,y)放字符c是否合法
	{
        for (int j = 0; j < 9; ++j) 
		{
            if (j!=y && board[x][j] == c) return false;
        }
        
        for (int i = 0; i < 9; ++i) 
		{
            if (i!=x && board[i][y] == c) return false;
        }
        
        for (int i = x/3*3; i < i/3*3+3; ++i) 
		{
            for (int j = y/3*3; j < y/3*3+3; ++y) 
			{
                if ((i!=x || j!=y) && board[i][j] == c) return false;
            }
        }
        
        return true;
    }
};

****************************************************************************************************************************************

79. 单词搜索      //DFS + Back

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) 
	{
        if (board.empty() || board[0].empty()) return false;
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n));
		
        for (int i = 0; i < m; ++i) 
		{
            for (int j = 0; j < n; ++j) 
			{
                if (helper(board, word, i, j, 0, visited)) return true;
            }
        }
		
        return false;
    }
	
    bool helper(vector<vector<char>>& board, string word, int i, int j, int idx, vector<vector<bool>>& visited)    //从(i,j)位置开始向四周遍历board，看是否能找到字符串与word[idx]往后相匹配
	{
        if (idx == word.size()) return true;
        if (i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j]!=word[idx] || visited[i][j]) return false;
		
        visited[i][j] = true;                                            //假如当前位置合法，设为已访问过；      
        bool res = helper(board, word, i - 1, j, idx + 1, visited)           //向四周递归到底，看看当前位置到底对不对
                || helper(board, word, i + 1, j, idx + 1, visited)               //不行的话，需要重置（当前位置没有访问过）
                || helper(board, word, i, j - 1, idx + 1, visited)
                || helper(board, word, i, j + 1, idx + 1, visited);				 
        visited[i][j] = false;
		
        return res;
    }
};


****************************************************************************************************************************************

200. 岛屿数量        //DFS

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) 
	{
        if (grid.empty() || grid[0].empty()) return 0;
        int m = grid.size(), n = grid[0].size(), cnt = 0;
        vector<vector<bool>> visited(m, vector<bool>(n));
		
        for (int i = 0; i < m; ++i) 
		{
            for (int j = 0; j < n; ++j) 
			{
                if (grid[i][j] == '0' || visited[i][j]) continue;               //visited[i][j]不可少
                helper(grid, i, j, visited);
                ++cnt;
            }
        }
		
        return cnt;
    }
	
    void helper(vector<vector<char>>& grid, int i, int j, vector<vector<bool>>& visited)         //从(i,j)位置向四周遍历grid，看看有多少"1"连成一片
	{
        if (i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]=='0' || visited[i][j]) return;     //递归终止条件（括号顺序不可变）
		
        visited[i][j] = true;                   //递归函数里正真做的事
		
        helper(grid, i - 1, j, visited);       //递归
        helper(grid, i + 1, j, visited);
        helper(grid, i, j - 1, visited);
        helper(grid, i, j + 1, visited); 
    }
};

****************************************************************************************************************************************

286. 墙与门        //DFS

class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) 
	{
	    int m=rooms.size(), n=rooms[0].size();
        for (int i = 0; i < m; ++i) 
		{
            for (int j = 0; j < n; ++j) 
			{
                if (rooms[i][j] == 0) helper(rooms, i, j, 0);
            }
        }
    }
	
    void helper(vector<vector<int>>& rooms, int i, int j, int val)             //从(i,j)位置开始向四周填rooms，(i,j)位置上填val
	{
        if (i<0 || i>=rooms.size() || j<0 || j>=rooms[i].size() || rooms[i][j]<val) return;          //rooms[i][j]上的值一开始是INT_MAX
		
        rooms[i][j] = val;
		
        helper(rooms, i - 1, j, val + 1);
        helper(rooms, i + 1, j, val + 1);
        helper(rooms, i, j - 1, val + 1);
        helper(rooms, i, j + 1, val + 1);
    }
};

****************************************************************************************************************************************

130. 被围绕的区域

class Solution {
public:
    void solve(vector<vector<char> >& board) 
	{
	    int m=board.size(), n=board[0].size();
        for (int i = 0; i < m; ++i) 
		{
            for (int j = 0; j < n; ++j) 
			{
                if ((i == 0 || i == m - 1 || j == 0 || j == board[i].size() - 1) && board[i][j] == 'O')
                    solveDFS(board, i, j);
            }
        }
		
        for (int i = 0; i < m; ++i) 
		{
            for (int j = 0; j < n; ++j) 
			{
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '$') board[i][j] = 'O';
            }
        }
    }
	
    void solveDFS(vector<vector<char> > &board, int i, int j)         //从(i,j)位置向四周填写board
	{
        if (board[i][j] == 'O') 
		{
            board[i][j] = '$';
			
            if (i > 0 && board[i - 1][j] == 'O') 
                solveDFS(board, i - 1, j);
            if (j < board[i].size() - 1 && board[i][j + 1] == 'O') 
                solveDFS(board, i, j + 1);
            if (i < board.size() - 1 && board[i + 1][j] == 'O') 
                solveDFS(board, i + 1, j);
            if (j > 0 && board[i][j - 1] == 'O') 
                solveDFS(board, i, j - 1);
        }
    }
};





