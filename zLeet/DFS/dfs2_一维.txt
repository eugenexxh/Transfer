17. 电话号码的字母组合

class Solution {
public:
    vector<string> letterCombinations(string digits) 
	{
        if (digits.empty()) return {};
        vector<string> res;
		string out;
        vector<string> dict{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
		
        letterCombinationsDFS(digits, dict, 0, out, res);
		
        return res;
    }
	
    void letterCombinationsDFS(string& digits, vector<string>& dict, int level, string out, vector<string>& res) 
	{
        if (level == digits.size()) {res.push_back(out); return;}
        string str = dict[digits[level] - '0'];
		
        for (int i = 0; i < str.size(); ++i) 
		{
            letterCombinationsDFS(digits, dict, level + 1, out + str[i], res);
        }
    }
}; 

****************************************************************************************************************************************

46. 全排列                         //原序列中没有重复数字

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) 
	{
        vector<vector<int>> res;		
        helper(nums, 0, res);		
        return res;
    }
	
    void helper(vector<int>& nums, int start, vector<vector<int>>& res) 
	{
        if(start >= nums.size()) {res.push_back(nums); return;}
        
        for(int i=start; i<nums.size(); ++i)
        {
            swap(nums[start], nums[i]);
            helper(nums, start+1, res);
            swap(nums[start], nums[i]);
        }	        		
    }
};

****************************************************************************************************************************************

47. 全排列 II                 //原序列中有重复数字，返回的全排列不能有重复的

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) 
	{
        set<vector<int>> res;		
        helper(nums, 0, res);		
        return vector<vector<int>> (res.begin(), res.end());
    }
	
    void helper(vector<int>& nums, int start, set<vector<int>>& res) 
	{
        if(start >= nums.size()) {res.insert(nums); return;}
        
        for (int i = start; i < nums.size(); ++i) 
        {
            if (i!=start && nums[i]==nums[start]) continue;           //有了它更快，没有也能AC
            swap(nums[start], nums[i]);
            helper(nums, start + 1, res);
            swap(nums[start], nums[i]);
        }               
    }
};

****************************************************************************************************************************************

39. 组合总和                        //原数组中没有重复元素，每个元素可以被多次使用

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
	{
        vector<vector<int>> res;
        vector<int> out;		
        helper(candidates, target, 0, out, res);		
        return res;
    }
	
    void helper(vector<int>& candidates, int target, int start, vector<int>& out, vector<vector<int>>& res) 
	{
        if (target < 0) return;
        if (target == 0) {res.push_back(out); return;}
		
        for (int i = start; i < candidates.size(); ++i) 
		{
            out.push_back(candidates[i]);			
            helper(candidates, target-candidates[i], i, out, res);			
            out.pop_back();
        }
    }
};

****************************************************************************************************************************************

40. 组合总和 II                       //原数组中有重复元素（改动1），每个元素不可以被多次使用（改动2）

class Solution {
public:
    vector<vector<int> > combinationSum2(vector<int> &num, int target) 
	{
        vector<vector<int> > res;
        vector<int> out;		
        sort(num.begin(), num.end());	                        //不能少	
        helper(num, target, 0, out, res);		
        return res;
    }
	
    void helper(vector<int> &num, int target, int start, vector<int> &out, vector<vector<int> > &res) 
	{
        if (target < 0) return;
        if (target == 0) {res.push_back(out); return;}
        
        for (int i = start; i < num.size(); ++i) 
        {
            if (i>start && num[i]==num[i - 1]) continue;              //改动1
            out.push_back(num[i]);
            helper(num, target - num[i], i + 1, out, res);            //改动2
            out.pop_back();
        }        
    }
};

****************************************************************************************************************************************

77. 组合

class Solution {
public:
    vector<vector<int>> combine(int n, int k) 
	{
        vector<vector<int>> res;
        vector<int> out;		
        helper(n, k, 1, out, res);		
        return res;
    }
	
    void helper(int n, int k, int start, vector<int>& out, vector<vector<int>>& res) 
	{
        if (out.size() == k) {res.push_back(out); return;}
		
        for (int i = start; i <= n; ++i) 
		{
            out.push_back(i);			
            helper(n, k, i + 1, out, res);			
            out.pop_back();
        }
    }
};

****************************************************************************************************************************************

78. 子集                                 //原数组中没有重复元素

class Solution {
public:
    vector<vector<int> > subsets(vector<int> &S) 
	{
        vector<vector<int> > res;
        vector<int> out;
        sort(S.begin(), S.end());		
        helper(S, 0, out, res);		
        return res;
    }
	
    void helper(vector<int> &S, int start, vector<int> &out, vector<vector<int> > &res) 
	{
        res.push_back(out);
		
        for (int i = start; i < S.size(); ++i) 
		{
            out.push_back(S[i]);
            helper(S, i + 1, out, res);
            out.pop_back();
        }
    }
};

****************************************************************************************************************************************

90. 子集 II                             //原数组中可能含有重复元素，要求解集不能含有重复的子集

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int> &S) 
	{
        if (S.empty()) return {};
        vector<vector<int>> res;
        vector<int> out;
        sort(S.begin(), S.end());		
        helper(S, 0, out, res);		
        return res;
    }
	
    void helper(vector<int> &S, int start, vector<int> &out, vector<vector<int>> &res) 
	{
        res.push_back(out);
		
        for (int i = start; i < S.size(); ++i) 
		{
            out.push_back(S[i]);
            helper(S, i + 1, out, res);
            out.pop_back();
            while (i + 1 < S.size() && S[i] == S[i + 1]) ++i;
        }
    }
};

****************************************************************************************************************************************

22. 括号生成

class Solution {
public:
    vector<string> generateParenthesis(int n) 
	{
        vector<string> res;
        helper(n, n, "", res);
        return res;
    }
	
    void helper(int left, int right, string out, vector<string> &res) 
	{
        if (left > right) return;		
        if (left == 0 && right == 0) res.push_back(out);
        else 
		{
            if (left > 0) helper(left - 1, right, out + '(', res);
            if (right > 0) helper(left, right - 1, out + ')', res);
        }
    }
};

****************************************************************************************************************************************

93. 复原IP地址

class Solution {
public:
    vector<string> restoreIpAddresses(string s) 
	{
        vector<string> res;
        helper(s, 4, "", res);
        return res;
    }
	
    void helper(string s, int k, string out, vector<string> &res) 
	{
        if (k == 0) 
		{
            if (s.empty()) res.push_back(out);
        }
        else 
		{
            for (int i = 1; i <= 3; ++i) 
			{
                if (s.size() >= i && isValid(s.substr(0, i))) 
				{
                    if (k == 1) helper(s.substr(i), k - 1, out + s.substr(0, i), res);
                    else helper(s.substr(i), k - 1, out + s.substr(0, i) + ".", res);
                }
            }
        }
    }
	
    bool isValid(string s) 
	{
        if (s.empty() || s.size() > 3 || (s.size() > 1 && s[0] == '0')) return false;
        int res = stoi(s);
        return res <= 255 && res >= 0;
    }
};






