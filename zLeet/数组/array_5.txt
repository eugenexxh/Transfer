33. Search in Rotated Sorted Array
法一：暴力搜索
class Solution {
public:
    int search(vector<int>& nums, int target) {
	
        for(int i=0; i<nums.size(); ++i)    //因为要用到元素的序位号（索引），所以不能用for(auto a : nums)
        {
            if(nums[i]==target) return i;
        }
        
        return -1;
    }
};

法二：利用旋转数组的性质
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0, right=nums.size()-1;
        while(left<=right)                                        //循环条件是<=
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target) return mid;
            
            else if(nums[mid] < nums[right])
            {
                if(target>nums[mid] && target<=nums[right]) left=mid+1;     //在两端取等号
                else right=mid-1;
            }
            else
            {
                if(target>=nums[left] && target<nums[mid]) right=mid-1;
                else left=mid+1;
            }
        }
        
        return -1;
        
    }
};

*************************************

81. Search in Rotated Sorted Array II

法一：暴力搜索
class Solution {
public:
    bool search(vector<int>& nums, int target) {
	
        for(auto a: nums)
        {
            if(a==target) return true;
        }
        
        return false;        
    }
};

法二：利用旋转数组的性质
class Solution {
public:
    bool search(vector<int>& nums, int target) {
       int left=0, right=nums.size()-1;
        while(left<=right)                                       
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target) return true;
            
            else if(nums[mid] < nums[right])
            {
                if(target>nums[mid] && target<=nums[right]) left=mid+1;     
                else right=mid-1;
            }
            else if(nums[mid] > nums[right])
            {
                if(target>=nums[left] && target<nums[mid]) right=mid-1;
                else left=mid+1;
            }
            else --right;          //处理重复的元素
        }
        
        return false;      
    }
};

************************************

153. Find Minimum in Rotated Sorted Array

法一：暴力搜索
class Solution {
public:
    int findMin(vector<int>& nums) {
	
        int res=nums[0];
		
        for(auto a: nums)
        {
            res=min(res, a);
        }
        
        return res;        
    }
};

法二：利用旋转数组的性质
class Solution {
public:
    int findMin(vector<int>& nums) {
        int left=0, right=nums.size()-1, res=nums[0];
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid] < nums[right])
            {
                res=min(res, nums[mid]);
                right=mid-1;
            }
            else
            {
                res=min(res, nums[left]);
                left=mid+1;
            }
        }
        
        return res;
       
    }
};

***************************************

154. Find Minimum in Rotated Sorted Array II

法一：暴力搜索
class Solution {
public:
    int findMin(vector<int>& nums) {
	
        int res=nums[0];
		
        for(auto a: nums)
        {
            res=min(res, a);
        }
        
        return res;     
    }
};

法二：利用旋转数组的性质
class Solution {
public:
    int findMin(vector<int>& nums) {
        int left=0, right=nums.size()-1, res=nums[0];
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid] < nums[right])
            {
                res=min(res, nums[mid]);
                right=mid-1;
            }
            else if(nums[mid] > nums[right])
            {
                res=min(res, nums[left]);
                left=mid+1;
            }
            else --right;
        }
        
        res=min(res, nums[left]);
        
        return res;   
    }
};

**************************************

34. Find First and Last Position of Element in Sorted Array

法一：暴力
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> out;
        for(int i=0; i<nums.size(); ++i)
        {
            if(nums[i]==target) out.push_back(i);
        }
        
        if(out.empty()) return {-1, -1};
        int n=out.size();
        int a=out[0], b=out[n-1];
        vector<int> res{a, b};
        
        return res;        
    }
};

法二：利用有序数组的性质（经典的二分法）
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int pos=helper(nums, target, 0, n-1);
        if(pos==-1) return {-1, -1};
        int left=pos, right=pos;
        while(left>0 && nums[pos]==nums[left-1]) --left;
        while(right<n-1 && nums[pos]==nums[right+1]) ++right;
        return {left, right};
      
    }
    
    int helper(vector<int>& nums, int target, int left, int right)
    {
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target) left=mid+1;
            else right=mid-1;
        }
        
        return -1;
    }
};