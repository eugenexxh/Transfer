118. Pascal's Triangle                         //生成杨辉三角的前numRows行

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> res(numRows, vector<int>());               //注意声明方式
		
        for(int i=0; i<numRows; ++i)
        {
            res[i].resize(i+1, 1);
			int n=res[i].size();
			
            for(int j=1; j<n-1; ++j)
            {
                res[i][j]=res[i-1][j-1]+res[i-1][j];
            }
        }
        
        return res;        
    }
};

************************************************************************************
本质就是一个二维数组

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1

************************************************************************************

119. Pascal's Triangle II     生成杨辉三角的第rowIndex行

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> res(rowIndex+1, vector<int>());
		
        for(int i=0; i<=rowIndex; ++i)
        {
            res[i].resize(i+1, 1);
			int n=res[i].size();
			
            for(int j=1; j<n-1; ++j)
            {
                res[i][j]=res[i-1][j-1]+res[i-1][j];
            }
        }
        
        return res.back();           
    }
};