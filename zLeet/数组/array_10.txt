53. Maximum Subarray              //找一个子数组，里面元素的和最大

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int curSum=0, res=INT_MIN;
		
        for(int i=0; i<nums.size(); ++i)
        {
            curSum=max(curSum+nums[i], nums[i]);     //因为nums里面存在负数，所以要先比较一下      关联_跳跃游戏45 55
            res=max(res, curSum);
        }
        return res;
    }
};


*******************************************************************************************************************************

209. Minimum Size Subarray Sum                      //找一个子数组，里面元素的和>=s, 元素的个数最少

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int sum=0, left=0, len=INT_MAX;
		
        for(int i=0; i<nums.size(); ++i)
        {
            sum += nums[i];
            while(sum>=s && left<=i)
            {
                len=min(len, i-left+1);
                sum -= nums[left++];
            }
        }
        
        return len==INT_MAX ? 0 : len;        
    }
};



**********************************

76 (Delete, Hard)
class Solution {
public:
    string minWindow(string s, string t) {
        string res = "";
        unordered_map<char, int> letterCnt;
        int left = 0, cnt = 0, minLen = INT_MAX;
        for (char c : t) ++letterCnt[c];
        for (int i = 0; i < s.size(); ++i) {
            if (--letterCnt[s[i]] >= 0) ++cnt;      //疑惑，--letterCnt[s[i]],第一次匹配后值都变为0.怎么还能匹配第二次呢？
            while (cnt == t.size()) {
                if (minLen > i - left + 1) {
                    minLen = i - left + 1;
                    res = s.substr(left, minLen);
                }
                if (++letterCnt[s[left]] > 0) --cnt;      //疑惑
                ++left;
            }
        }
        return res;
    }
};




