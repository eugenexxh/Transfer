169. Majority Element     //有一个众数(2/n)，题目说明肯定存在众数，所以无需验证

法一：摩尔投票法
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res=0, cnt=0, n=nums.size();
		
        for(auto a : nums)
        {		     
            if(a==res) ++cnt;                               //顺序千万不能乱啊
			else if(cnt==0) {res=a; cnt=1;}
            else --cnt;
        }
		
        return res;              //题意肯定有众数，无需验证，直接返回     
    }
};

法二：哈希表 (舍）
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int, int> m;
        for(auto a : nums) ++m[a];
        int cnt=0;
        for(auto it=m.begin(); it!=m.end(); ++it)
        {
            cnt = max(cnt, it->second);
        }
        
        int res=0;
        for(auto it=m.begin(); it!=m.end(); ++it)
        {
            if(it->second==cnt) res=it->first;
        }
        
        return res;        
    }
};

*****************************************

229. Majority Element II                //有两个众数(n/3)，且需要验证

class Solution {                        //限定了时间和空间复杂度为O(1), 无法使用哈希表，只能使用摩尔投票法
public:
    vector<int> majorityElement(vector<int>& nums) { 
        int n=nums.size();
        int res1=0, res2=0, cnt1=0, cnt2=0;
		
        for(auto a : nums)
        {	
            if(a==res1) ++cnt1;                                        //顺序千万不能乱啊
            else if(a==res2) ++cnt2;
			else if(cnt1==0) {res1=a, cnt1=1;}
			else if(cnt2==0) {res2=a, cnt2=1;}
            else {--cnt1; --cnt2;}
        }
        
        cnt1=cnt2=0;                    //验证
        vector<int> res;
        for(auto a : nums)
        {
            if(a==res1) ++cnt1;
            else if(a==res2) ++cnt2;
        }
        if(cnt1 > n/3) res.push_back(res1);
        if(cnt2 > n/3) res.push_back(res2);
        
        return res;
    }
};